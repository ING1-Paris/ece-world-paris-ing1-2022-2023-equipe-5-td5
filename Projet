#include <stdio.h>
#include <stdlib.h>
#include <allegro.h>
#include <math.h>
#include <string.h>
#include <time.h>


#define SCREEN_W 1500 //largeur de la fenêtre allegro
#define SCREEN_H 1000  //hauteur de la fenêtre allegro


///--------------------STRUCTURES---------------------------///


typedef struct joueur //structure chargée de stocker les informations d'un joueur
{
    //nom
    char* name; //nom du joueur
    //taille du nom
    int taillenom;
    //nombre de tickets
    int tickets;
    //score du joueur sur les différents minijeux
    int score[3]; //0- temps du tir au ballon || 1-nb victoires au paris hippiques || 2-score au taupe là
    //couleur
    int color; //joueur1 = makecol(17,75,200) #bleu joueur 2 = makecol(129,30,30) #rouge

}t_joueur;

typedef struct partie //structure principale chargée de stocker toutes les infos de la partie
{
    //tab de 2 joueurs
    t_joueur playerBase[2];

    int terrain[10][10]; //terrain en 10 par 10
    int posJoueur[2];//matrice 2:1 stockant la position des joueurs sur la carte
    int tabHighScore[3]; //tableau stockant les meilleurs scores de tout les temps
}t_partie;


typedef struct banqueImage //  Structure utilisée pour stocker les images utilisées pour le projet
{
    BITMAP * fondMenu; //fond du menu principal
    BITMAP * joueur; // sprite du joueur
    BITMAP * batMinigame[3]; //batiments représentant les mini jeux
    BITMAP * finishLine; // lgne d'arrivée de la course hippique
    BITMAP * taupe; //taupe
    BITMAP * cheval; //cheval paris hippique

}t_banqueImage;


typedef struct banquePolice //  Structure utilisée pour stocker les polices utilisées pour le projet
{
    FONT * Roller_72;
    FONT * Roller_it_24;
    FONT * Pixel_11;
    FONT * System_14;
    FONT * Hudson_26;
    FONT * Hudson_big;

}t_banquePolice;


///--------------------- SOUS-PROGS -----------------------///

//-------- Système -------//
void initAllegro(); //SSPG chargé d'initialiser les fonctions d'allegro
t_banqueImage loadBanqueImage(); //SSPG chargé d'initaliser et de charger les différentes images dans la structure de stockage
t_banquePolice loadBanquePolices();//idem mais pour les polices d'"critures utilisées
t_partie initPartie(); //SSPG chargé d'initialiser les données d'une nouvelles parties
int isClickInCoord(int x1, int x2, int y1, int y2);
int isClickInRadius(int x, int y, int rad);

//---------Menu-----------//
void menuPrincipal(t_partie partie, t_banqueImage image, t_banquePolice police); //SSPG chargé de l'affichage du menu principal et d'enregistrer le choix du joueur
void nouvellePartie(t_partie partie, t_banqueImage image, t_banquePolice police);
t_joueur remplirJoueur(int playerCount, t_banqueImage image, t_banquePolice police);
void affTempoSaisiePseudo(int playerCount, t_banqueImage image, t_banquePolice police);


//---------BDJ-------------//
void boucleDeJeu(t_partie partie, t_banqueImage image, t_banquePolice police);
void afficherCarte(BITMAP * buffer, t_banquePolice police, t_banqueImage image, t_partie partie, int posJoueur[2]);
void afficherClassement( t_partie partie, t_banqueImage image, t_banquePolice police, int prov);



///-------------------------MAIN--------------------------///


int main()
{
    ///DECLARATION DES STRUCTURE PRINCIPALES
    t_banqueImage banqueImage;
    t_banquePolice banquePolice;
    t_partie partie;


    initAllegro(); //on initialise tout le nécessaire en rapport avec allegro

    banqueImage = loadBanqueImage(); //on charge les images utilisées dans la structure
    banquePolice = loadBanquePolices(); //idem avec les polices
    partie = initPartie();
    //initialisation de la carte


    while(!key[KEY_ESC]) //boucle de jeu
    {
        //menu principal
        menuPrincipal(partie, banqueImage, banquePolice);
    }


    return 0;
}
END_OF_MAIN()



///--------------------- SOUS-PROGS -----------------------///


//--------------MENU

/*
    SSPG chargé d'afficher les options du menu principal et
    d'enregistrer le choix du joueur
*/
void menuPrincipal(t_partie partie, t_banqueImage image, t_banquePolice police)
{
    //déclaration des différentes variables
    int choix=0; //variable pour stocker le choix du joueur, initialisée à 0

    BITMAP * buffer; //on utilise un buffer pour un affichage plus fluide
    buffer=create_bitmap(SCREEN_W,SCREEN_H);


    ///choix du joueur
    while(choix==0)
    {
        clear_bitmap(buffer); //on vide le buffer

        blit(image.fondMenu, buffer, 0,0,0,0,SCREEN_W,SCREEN_H); //on affiche l'image de fond sur le buffer


        ///-------------------------------------AFFICHAGE TITRE DU JEU----------------------------------------------///

        textout_centre_ex(buffer, police.Hudson_big, "ECE", (SCREEN_W*5)/6-25+6, SCREEN_H/10+2,  makecol(0,0,0), -1 );
        textout_centre_ex(buffer, police.Hudson_big, "World", (SCREEN_W*5)/6+25+6, SCREEN_H/10+75+2,  makecol(0,0,0), -1 );

        textout_centre_ex(buffer, police.Hudson_big, "ECE", (SCREEN_W*5)/6-25, SCREEN_H/10, makecol(255,255,255), -1 );
        textout_centre_ex(buffer, police.Hudson_big, "World", (SCREEN_W*5)/6+25, SCREEN_H/10+75, makecol(250,218,94), -1 );



        ///-------------------------------------AFFICHAGE CASES CHOIX MENU----------------------------------------------///

        for(int i=0; i<3; i++) //on boucle pour chaque case du tableau
        {
            rectfill(buffer, 50+100*i, 235+200*i, 400+100*i, 300+200*i, makecol(171, 224, 215));//on dessine une case bleu ciel

            //bords noir des cases
            rectfill(buffer, 45+100*i,230+200*i, 405+100*i, 235+200*i,  makecol(0,0,0)); //haut de la case
            rectfill(buffer, 45+100*i,230+200*i, 50+100*i, 305+200*i,  makecol(0,0,0)); //gauche de la case
            rectfill(buffer, 400+100*i, 230+200*i, 405+100*i, 305+200*i,  makecol(0,0,0)); //droit de la case
            rectfill(buffer, 45+100*i, 300+200*i, 405+100*i, 305+200*i,  makecol(0,0,0)); //bas de la case


            if((mouse_x > 50+100*i)&&(mouse_x<400+100*i)&&(mouse_y>235+200*i)&&(mouse_y<300+200*i)) //si le joueur passe son curseur sur une case
            {
                rectfill(buffer, 50+100*i, 235+200*i, 400+100*i, 300+200*i, makecol(34, 101, 140));//on affiche la case ensurbrillance bleu gris

                if(mouse_b==1)//si il clique sur la case
                {
                    choix=i+1; //on set le choix correspondant
                    rectfill(buffer, 50+100*i, 235+200*i, 400+100*i, 300+200*i, makecol(4, 45, 148)); //on réaffiche la case en bleu foncé

                }
            }
        }

        ///----------------------------------AFFICHAGE OPTIONS MENU----------------------------------///


        textout_centre_ex(buffer, police.Hudson_26, "Nouvelle Partie", 224-1, 234+2,  makecol(0,0,0), -1);
        textout_centre_ex(buffer, police.Hudson_26, "Classement", 324-1, 434+2,  makecol(0,0,0), -1);
        textout_centre_ex(buffer, police.Hudson_26, "Quitter", 424-1, 634+2,  makecol(0,0,0), -1);

        //on affiche les textes des différentes options du menu
        textout_centre_ex(buffer, police.Hudson_26, "Nouvelle Partie", 225, 235, makecol(95, 137, 140), -1);
        textout_centre_ex(buffer, police.Hudson_26, "Classement", 325, 435, makecol(95, 137, 140), -1);
        textout_centre_ex(buffer,police.Hudson_26, "Quitter", 425, 635, makecol(95, 137, 140), -1);


        blit(buffer, screen, 0,0,0,0, SCREEN_W,SCREEN_H); //on affiche le contenu du buffer à l'écran

    }
    ///résultats du choix
    switch(choix)
    {
    //nouvelle partie
    case 1:
        nouvellePartie(partie, image, police);
        break;

   //classement
    case 2:
        afficherClassement(partie, image, police, -1);
        break;

    //quitter le jeu
    case 3:
        exit(0);
        break;
    }
}

void nouvellePartie(t_partie partie, t_banqueImage image, t_banquePolice police)
{
    srand(time(NULL)); //utilisation de l'aléatoire
    int rando; //décla d'une variable utilisée pour stocker l'aléatoire

    t_joueur jTemp; //structure de joueur servant de stockage pour un tri

    ///SAISIE DES PSEUDOS ET INITIALISATION DES INFOS
    for(int i=0; i<2; i++) //on boucle l'affichage/saisie des pseudos pour le nombre de joueurs
    {
        affTempoSaisiePseudo(i+1, image, police); //affichage temporaire de la saisir des pseudo
        partie.playerBase[i] = remplirJoueur(i+1, image, police); //on saisie le pseudo du joueur
    }


    for(int i=0; i<10; i++) //pour toutes les cases de la carte
    {
        for(int j=0; j<10; j++)
        {
            partie.terrain[i][j]=0;
        }
    }

    //assignation des batiments et zones de jeu
    //tir au ballon
    partie.terrain[3][1]=1;
    partie.terrain[3][2]=1;
    partie.terrain[4][1]=1;
    partie.terrain[4][2]=1;
    partie.terrain[4][3]=11;

    //paris hippiques
    partie.terrain[2][6]=2;
    partie.terrain[2][7]=2;
    partie.terrain[3][6]=2;
    partie.terrain[3][7]=2;
    partie.terrain[4][6]=22;

    //taupe la
    partie.terrain[7][4]=3;
    partie.terrain[7][5]=3;
    partie.terrain[8][4]=3;
    partie.terrain[8][5]=3;
    partie.terrain[6][4]=33;


    partie.posJoueur[0]=5; //5
    partie.posJoueur[1]=8; //8


    ///mélange de l'ordre de jeu des joueurs
    rando = (rand()% 2); //entier aléatoire entre 0 et 1
    if(rando %2) // 1 chance sur 2
    {
        jTemp= partie.playerBase[0]; //on intervertis les deux joueurs
        partie.playerBase[0]= partie.playerBase[1];
        partie.playerBase[1]= jTemp;

    }

    partie.playerBase[0].color=makecol(17,75,200);
    partie.playerBase[1].color=makecol(129,30,30);


    //on lance la boucle de jeu
    boucleDeJeu( partie,  image,  police);

}


/*
    Sous programme chargé de l'affichage temporaire de l'écran de saisie des pseudos
    afin que l'écran ne soit pas bloqué sur l'écran précédent en attendant que l'utilisateur
    commence la saisie du pseudo
*/
void affTempoSaisiePseudo(int playerCount, t_banqueImage image, t_banquePolice police)
{
    int wait=0;//on crée une variable arbitraire

    BITMAP * buffer2x; //Déclaration du buffer
    buffer2x=create_bitmap(SCREEN_W,SCREEN_H);//creation du bitmap buffer double


    while(wait<15) //on attends juste que l'affichage se fasse
    {

        clear_bitmap(buffer2x);//clear du buffer en debut de boucle

        blit(image.fondMenu,buffer2x,0,0,0,0,SCREEN_W,SCREEN_H);//affichage du decor du menu sur le buffer


        rectfill(buffer2x, SCREEN_W/4-10, 20-10+50, (SCREEN_W*3)/4+10, 95+10+50, makecol(66,40,14));
        rectfill(buffer2x, SCREEN_W/4, 20+50, (SCREEN_W*3)/4, 95+50, makecol(150,150,150));//carré fond rouge pour le titre de la page


        textprintf_centre_ex(buffer2x, police.Hudson_26, SCREEN_W/2-5, 20+50,makecol(0,0,0), -1, "Saisie pseudo joueur #%d",playerCount); //on idique le pseudo de quel joueur on choisit
        textprintf_centre_ex(buffer2x, police.Hudson_26, SCREEN_W/2, 20+50,makecol(255,255,255), -1, "Saisie pseudo joueur #%d",playerCount); //on idique le pseudo de quel joueur on choisit





        //afficher continuer
         rectfill(buffer2x, SCREEN_W/4-10, 385-10+200, (SCREEN_W*3)/4+10, 455+10+200, makecol(66,40,14));//carré fond blanc pour la saisie du name
        rectfill(buffer2x, SCREEN_W/4, 385+200, (SCREEN_W*3)/4, 455+200, makecol(150,150,150));//carré fond blanc pour la saisie du name


        textout_centre_ex(buffer2x, police.Hudson_26, "ENTRER pour continuer", SCREEN_W/2-5, 385+200, makecol(0,0,0), -1);
        textout_centre_ex(buffer2x, police.Hudson_26, "ENTRER pour continuer", SCREEN_W/2, 385+200, makecol(255,255,255), -1);



        //Afficher pseudo
        rectfill(buffer2x, (SCREEN_W)/3-8, 235-8+100, (SCREEN_W*2)/3+8, 310+8+100, makecol(0,0,0));
        rectfill(buffer2x, (SCREEN_W)/3, 235+100, (SCREEN_W*2)/3, 310+100, makecol(255,255,255));//carré fond blanc pour la saisie du pseudo



        blit(buffer2x,screen,0,0,0,0,SCREEN_W,SCREEN_H);//affichage du double buffer sur l'écran

        wait++;
    }


}




/*
    Sous programme chargé du remplissage des informations de chaque joueurs
    Procède à la saisie par clavier d'un pseudo
*/


t_joueur remplirJoueur(int playerCount, t_banqueImage image, t_banquePolice police)
{

    BITMAP * buffer2x; //Déclaration du buffer
    buffer2x=create_bitmap(SCREEN_W,SCREEN_H);//creation du bitmap buffer double






    t_joueur joueurSaisie; //on déclare la structure qu'on va remplir

    char saisie[20];
    int proceed=0;
    int charCnt=0;//variable utilisée pour compter le nombre de lettre actuellement présente dans le pseudo
    int tailleMax=15;
    int SaisieTouche;//variable de la touche saisie
    int SaisieToucheASCII, SaisieToucheScancode;

    clear_keybuf();//on nettoye le buffer du clavier




    //Saisie du pseudo

    while(!proceed)
    {

        clear_bitmap(buffer2x);//clear du buffer en debut de boucle

        blit(image.fondMenu,buffer2x,0,0,0,0,SCREEN_W,SCREEN_H);//affichage du decor du menu sur le buffer

        rectfill(buffer2x, SCREEN_W/4-10, 20-10+50, (SCREEN_W*3)/4+10, 95+10+50, makecol(66,40,14));
        rectfill(buffer2x, SCREEN_W/4, 20+50, (SCREEN_W*3)/4, 95+50, makecol(150,150,150));//carré fond rouge pour le titre de la page


        textprintf_centre_ex(buffer2x, police.Hudson_26, SCREEN_W/2-5, 20+50,makecol(0,0,0), -1, "Saisie pseudo joueur #%d",playerCount); //on idique le pseudo de quel joueur on choisit
        textprintf_centre_ex(buffer2x, police.Hudson_26, SCREEN_W/2, 20+50,makecol(255,255,255), -1, "Saisie pseudo joueur #%d",playerCount); //on idique le pseudo de quel joueur on choisit





        //saisie pseudo

        if(keypressed())
        {
            SaisieTouche=readkey();//lecture de la touche
            SaisieToucheASCII=SaisieTouche & 0xFF; //conversion en code ASCII
            SaisieToucheScancode=SaisieTouche  >> 8; //code numerique de la touche saisie (scancode)

            if (( SaisieToucheASCII>64 && SaisieToucheASCII<91) || ( (SaisieToucheASCII>96 && SaisieToucheASCII<122)&&(charCnt<tailleMax))) //on teste si la touche appuyée est une lettre
            {


                saisie[charCnt]=SaisieToucheASCII;//met a la bonne position la touche pressée ASCII
                saisie[charCnt+1]= '\0';
                charCnt++;


            }

            else if ( SaisieToucheScancode ==KEY_BACKSPACE && (charCnt>0))//effacer une lettre
            {
                saisie[charCnt]= '\0';
                charCnt--;
                if ( charCnt<0 )
                {
                    charCnt=0;
                }


            }


            //afficher continuer
         rectfill(buffer2x, SCREEN_W/4-10, 385-10+200, (SCREEN_W*3)/4+10, 455+10+200, makecol(66,40,14));//carré fond blanc pour la saisie du name
        rectfill(buffer2x, SCREEN_W/4, 385+200, (SCREEN_W*3)/4, 455+200, makecol(150,150,150));//carré fond blanc pour la saisie du name


        textout_centre_ex(buffer2x, police.Hudson_26, "ENTRER pour continuer", SCREEN_W/2-5, 385+200, makecol(0,0,0), -1);
        textout_centre_ex(buffer2x, police.Hudson_26, "ENTRER pour continuer", SCREEN_W/2, 385+200, makecol(255,255,255), -1);




            if (SaisieToucheScancode==KEY_ENTER && charCnt != 0 )//on teste si l'user appuie sur la touche enter ET qu'il a saisie au moins une lettre du name
            {
                proceed =1; //si oui, on continue
                joueurSaisie.taillenom=strlen(saisie);
                joueurSaisie.name = malloc(sizeof(char)*joueurSaisie.taillenom);
                strcpy(joueurSaisie.name, saisie);


            }


            clear_keybuf();//nettoyer le buffer du clavier

            //Afficher pseudo
            rectfill(buffer2x, (SCREEN_W)/3-8, 235-8+100, (SCREEN_W*2)/3+8, 310+8+100, makecol(0,0,0));
            rectfill(buffer2x, (SCREEN_W)/3, 235+100, (SCREEN_W*2)/3, 310+100, makecol(255,255,255));//carré fond blanc pour la saisie du pseudo






            textprintf_centre_ex(buffer2x,police.Hudson_26,SCREEN_W/2,235+100,makecol(0, 0, 0),-1,"%s",saisie); //on affiche le name en cour de saisie










            blit(buffer2x,screen,0,0,0,0,SCREEN_W,SCREEN_H);//affichage du double buffer sur l'écran
        }

    }

    joueurSaisie.tickets=5;//on initialise le nombre de tickets du joueur à 5
    for(int i=0; i<3; i++)
    {
        joueurSaisie.score[i]=-1;//on initialise tout les scores à -1 pour signifier qu'on y a pas encore joué
    }

    return joueurSaisie; //on retourne la structure remplie
}



//-------------------SYSTEME


//SSPG chargé de l'initialisation des fonctions relatives à allegro
void initAllegro()
{

    srand(time(NULL)); //on initialise la fonction random (utile pour plus tard)
    allegro_init();    //initialisation allegro
    install_keyboard(); //on permet l'utilisation du clavier
    install_mouse();  //on permet l'utilisation de la souris
    set_color_depth(desktop_color_depth());    //initialisation de la palette de couleur


    //on initialise les fonctions de son
    if (install_sound(DIGI_AUTODETECT, MIDI_NONE, 0) != 0) {
        printf("Error initialising sound: %s\n", allegro_error);
        exit(1);
    }

    if((set_gfx_mode(GFX_AUTODETECT_WINDOWED,SCREEN_W,SCREEN_H,0,0))!=0)      //paramètres fenêtre
    {
        //problème avec fenêtre allegro
        allegro_message("Pb de mode graphique");
        allegro_exit();                                             //fermeture allegro
        exit(EXIT_FAILURE);                                         //sortie forcée du programme
    }

    show_mouse(screen); //on affiche la souris à l'écran


}


//SSPG chargé d'initialiser les données d'une nouvelle partie
t_partie initPartie()
{
    t_partie partie;



    partie.playerBase[0].color = makecol(184,56,59);   //rouge


    partie.playerBase[1].color = makecol(37,109, 141);    //bleu


    return partie;
}




//SSPG permettant le chargement des images dans la structure
t_banqueImage loadBanqueImage()
{
    t_banqueImage image;

    image.fondMenu= load_bitmap("images/fondMenu.bmp", NULL);
    image.finishLine= load_bitmap("images/finishLine.bmp", NULL);
    image.taupe = load_bitmap("images/taupe.bmp", NULL);
    image.joueur= load_bitmap("images/joueur.bmp", NULL);
    image.cheval=load_bitmap("images/cheval.bmp", NULL);
    
    

    image.batMinigame[0] = load_bitmap("images/batBallon.bmp", NULL);
    image.batMinigame[1] = load_bitmap("images/batCheval.bmp", NULL);
    image.batMinigame[2] = load_bitmap("images/batTaupe.bmp", NULL);

    return image;
}



//SSPG permettant le chargement des polices dans la structure
t_banquePolice loadBanquePolices()
{
    t_banquePolice police;


    police.Pixel_11 = load_font("polices/PPixel_11.pcx", NULL, NULL);
    police.System_14 = load_font("polices/system_14.pcx", NULL, NULL);
    police.Roller_it_24 = load_font("polices/roller_it_24.pcx", NULL, NULL);
    police.Roller_72 = load_font("polices/roller_72.pcx", NULL, NULL);
    police.Hudson_26 = load_font("polices/hudson_party_26.pcx", NULL, NULL);
    police.Hudson_big = load_font("polices/hudson_big.pcx", NULL, NULL);
    return police;
}
//SSPG permattant de détecter si l'on clique à l'intérieur d'un carré donné
int isClickInCoord(int x1, int x2, int y1, int y2)
{


    if((mouse_x>x1 && mouse_x<x2)&&(mouse_y>y1 && mouse_y<y2)&&mouse_b&1)
    {
                return 1;

    }
    else return 0;
}

//SSPG permettant de détecter si on clique dans un certains rayon d'un point
int isClickInRadius(int x, int y, int rad)
{

    if(mouse_b&1 && (rad>= sqrt(pow(x-mouse_x,2)+pow(y-mouse_y, 2))) )
    {
        return 1;
    }
    else return 0;
}



//-------------BOUCLE DE JEU


void boucleDeJeu(t_partie partie, t_banqueImage image, t_banquePolice police)
{


    BITMAP * buffer = create_bitmap(SCREEN_W,SCREEN_H); //déclaration du buffer


    int choix=0;
    int actionJoueur=0;



    while(actionJoueur==0)
    {
        clear_bitmap(buffer);
        afficherCarte(buffer,  police, image, partie, partie.posJoueur);

        for(int i=0; i<3; i++)
        {
            if(isClickInCoord(1150+5,1450-5, 500+165*i+5,645+165*i-5)) choix=i+1;  //on détecte un éventuel click
        }

        switch (choix) //on regarde le choix du joueur
        {
        case 1:
            actionJoueur=1; //on quitte la partie
            break;

        case 2:
            actionJoueur=2; //on affiche le classement
            break;

        case 3 :
            switch(partie.terrain[partie.posJoueur[0]][partie.posJoueur[1]]) //on regarde la case de la où on se trouve
            {
            case 11: //si c'est le lancement du jeu 1
                actionJoueur=11;
                break;

            case 22: //si c'est le lancement du jeu 2
                actionJoueur=22;
                break;

            case 33: //si c'est le lancement du jeu 3
                actionJoueur=33;
                break;


            default: //si c'est une case lambda
                choix=0; //on remet le choix à 0
                break;
            }
            break;

        }

        blit(buffer, screen, 0,0, 0,0,SCREEN_W,SCREEN_H);//on affiche le contenu du buffer à l'écran
    }

    switch(actionJoueur)
    {
    case 1:
        //sauvegarder et quitter*
        //on compare les scores de la partie aux meilleurs score et on sauvegarde les meilleurs scores
        menuPrincipal(partie, image, police);
        break;

    case 2:
        //classement
        afficherClassement(partie,image, police, 1);
        break;

    case 11:
        //lancer tir au ballon
        break;

    case 22:
        //lancer paris hippiques
        break;

    case 33:
        //lancer taupe là
        break;

    }

}

void afficherCarte(BITMAP * buffer,  t_banquePolice police, t_banqueImage image, t_partie partie, int posJoueur[2])
{


    rectfill(buffer, 0,0, SCREEN_W, SCREEN_H, makecol(0,125,0)); //affichage du fond

    rectfill(buffer, 1100, 0, SCREEN_W, SCREEN_H, makecol(127,127,127)); //affichage de la barre d'interface



    ///affichage de la carte
    for(int i=0; i<10; i++) //pour toutes les cases de la carte
    {
        for(int j=0; j<10; j++)
        {

            rect(buffer, 110*i,100*j, 110*(i+1),100*(j+1), makecol(0,0,0) ); //on dessine le contour

            switch(partie.terrain[i][j])
            {
            case 0:
                rect(buffer, 110*i,100*j, 110*(i+1),100*(j+1), makecol(0,0,0) ); //on dessine le contour
                break;

            case 1: //si on est sur une case  du batiment du tir au ballon
                if(partie.terrain[i+1][j]== 1 && partie.terrain[i][j+1]==1) //on regarde si c'est la case en haut a gauche du batiment
                {
                    //blit le sprite du batiment
                    masked_stretch_blit(image.batMinigame[0], buffer, 0,0,400,400, 110*i,100*j, 220,200);
                }
                break;

            case 2: //qi on est sur une case du paris hippique
                if(partie.terrain[i+1][j]== 2 && partie.terrain[i][j+1]==2) //on regarde si c'est la case en haut a gauche du batiment
                {
                    masked_stretch_blit(image.batMinigame[1], buffer, 0,0,400,400, 110*i,100*j, 220,200);
                }
                break;

            case 3://si on est sur une case du taupe là
                if(partie.terrain[i+1][j]== 3 && partie.terrain[i][j+1]==3) //on regarde si c'est la case en haut a gauche du batiment
                {
                    masked_stretch_blit(image.batMinigame[2], buffer, 0,0,400,400, 110*i,100*j, 220,200);
                }
                break;

            default:
                rectfill(buffer, 110*i,100*j, 110*(i+1),100*(j+1), makecol(200,200,200) ); //on affiche la case de lancement de jeu
                break;

            }


            if(posJoueur[0]==i && posJoueur[1]==j)
            {
                //si c'est la position du joueur, on affiche le joueur
                masked_stretch_blit(image.joueur, buffer, 0,0,130, 100, 110*i,100*j, 110, 100 );

            }

            if(isClickInCoord(110*i,110*(i+1),100*j,100*(j+1))&& (partie.terrain[i][j]<1 || partie.terrain[i][j]>3 )) //si on clique sur une case acessible
            {
                posJoueur[0]=i;//on actualise la position du joueur
                posJoueur[1]=j;

            }
        }
    }



    ///affichage de l'interface
    //affichage de l'ordre de jeu
    textout_centre_ex(buffer, police.Hudson_26, "Au Tour De:", 1300, 50, makecol(255,255,255), -1);
    textprintf_centre_ex(buffer, police.Hudson_26, 1300, 100, partie.playerBase[0].color, -1, "%s - %dT", partie.playerBase[0].name, partie.playerBase[0].tickets );
    textprintf_centre_ex(buffer, police.Hudson_26, 1300, 200, partie.playerBase[1].color, -1, "%s - %dT", partie.playerBase[1].name, partie.playerBase[1].tickets );


    //affichage des options
    for(int i=0; i<3; i++)
    {
        rectfill(buffer, 1150, 500+165*i, 1450, 645+165*i, makecol(0,0,0)); //on affiche le contour
        rectfill(buffer, 1150+5, 500+165*i+5, 1450-5, 645+165*i-5, makecol(200,200,200));  //on rmplis la case
        if(isClickInCoord(1150+5,1450-5, 500+165*i+5,645+165*i-5)) rectfill(buffer, 1150+5, 500+165*i+5, 1450-5, 645+165*i-5, makecol(110,65,38));  //on détecte un éventuel click

        switch (i)
        {
        case 0:
            textout_centre_ex(buffer, police.Hudson_26, "Quitter", 1300, 540+165*i, makecol(0,0,0), -1);
            break;

        case 1:
            textout_centre_ex(buffer, police.Hudson_26, "Classement", 1300, 540+165*i, makecol(0,0,0), -1);
            break;

        case 2:
            textout_centre_ex(buffer, police.Hudson_26, "Jouer", 1300, 540+165*i, makecol(0,0,0), -1);
            break;
        }
    }
}




void afficherClassement( t_partie partie, t_banqueImage image, t_banquePolice police, int prov)
{
    BITMAP * buffer = create_bitmap(SCREEN_W,SCREEN_H); //déclaration du buffer


    int quitter=0;//variable stockant le choix du joueur
    for(int i=0; i<3; i++)
    {
        partie.tabHighScore[i]=0;
    }



    while(!quitter) //tant qu'on ne choisit pas de quitter
    {
        clear_bitmap(buffer);

        rectfill(buffer, 0,0, SCREEN_W, SCREEN_H, makecol(0,125,0)); //affichage du fond


        //afficher titre de la page

        textout_centre_ex(buffer, police.Hudson_big, "CLASSEMENT ET STATISTIQUES", SCREEN_W/2, 30, makecol(255,255,255), -1);


        ///afficher classement des joueurs pour la partie en cour
        if(prov==1)
        {

            textout_centre_ex(buffer, police.Hudson_big, "Partie Actuelle", SCREEN_W/2, 100, makecol(255,255,255), -1);
            for(int i=0; i<2; i++)
            {
                //affichage du nom du joueur
                textprintf_centre_ex(buffer, police.Hudson_26, SCREEN_W/2, 200+i*120, partie.playerBase[i].color, -1, "%s :", partie.playerBase[i].name);
                //affichage score tir au ballon
                if(partie.playerBase[i].score[0]==-1) textprintf_centre_ex(buffer, police.Hudson_26, SCREEN_W/2, 225+i*120, partie.playerBase[i].color, -1, "Temps tir au ballon: N/A");
                else textprintf_centre_ex(buffer, police.Hudson_26, SCREEN_W/2, 225+i*120, partie.playerBase[i].color, -1, "Temps tir au ballon: %d s ", partie.playerBase[i].score[0]);
                //affichage nombre de victoir au paris hippiques
                if(partie.playerBase[i].score[1]==-1)textprintf_centre_ex(buffer, police.Hudson_26, SCREEN_W/2, 250+i*120, partie.playerBase[i].color, -1, "Nombre de paris gagnees: N/A");
                else textprintf_centre_ex(buffer, police.Hudson_26, SCREEN_W/2, 250+i*120, partie.playerBase[i].color, -1, "Nombre de paris gagnees: %d  ", partie.playerBase[i].score[1]);
                //affichage taupe touchées
                if(partie.playerBase[i].score[2]==-1) textprintf_centre_ex(buffer, police.Hudson_26, SCREEN_W/2, 275+i*120, partie.playerBase[i].color, -1, "Nombre de taupes touchees: N/A  ");
                else textprintf_centre_ex(buffer, police.Hudson_26, SCREEN_W/2, 275+i*120, partie.playerBase[i].color, -1, "Nombre de taupes touchees: %d  ", partie.playerBase[i].score[2]);


            }
        }
        else textout_centre_ex(buffer, police.Hudson_big, "Aucune partie en cour", SCREEN_W/2, 100, makecol(255,255,255), -1);



        ///afficher les meilleurs classement sauvegardés
        textout_centre_ex(buffer, police.Hudson_big, "Meilleurs Scores", SCREEN_W/2, 450, makecol(255,255,255), -1);
        textprintf_centre_ex(buffer, police.Hudson_26, SCREEN_W/2, 550, makecol(255,255,255), -1, "Temps tir au ballon: %d s ", partie.tabHighScore[0]);
        textprintf_centre_ex(buffer, police.Hudson_26, SCREEN_W/2, 575, makecol(255,255,255), -1, "Nombre de paris gagnes: %d  ", 'é',partie.tabHighScore[1]);
        textprintf_centre_ex(buffer, police.Hudson_26, SCREEN_W/2, 600, makecol(255,255,255), -1, "Nombre de taupes touchees: %d  ",'é', partie.tabHighScore[2]);



        ///Case pour quitter
        rectfill(buffer, 1150, 500-165, 1450, 645-165, makecol(0,0,0)); //on affiche le contour
        rectfill(buffer, 1150+5, 500-165+5, 1450-5, 645-165-5, makecol(200,200,200));  //on rmplis la case
        textout_centre_ex(buffer, police.Hudson_26, "Quitter", 1300, 540-165, makecol(0,0,0), -1);


        if(isClickInCoord(1150,  1450,500-165, 645-165)) quitter=1;

        blit(buffer, screen, 0,0, 0,0,SCREEN_W,SCREEN_H);
    }


    if(prov==1) //si on regarde le classement pendant la partie
    {
        boucleDeJeu(partie, image, police);//on reprends la partie
    }
    else menuPrincipal(partie, image, police); //sinon on reviens au menu


}


